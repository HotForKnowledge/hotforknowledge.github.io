<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spreads on Hot For Knowledge</title>
    <link>https://hotforknowledge.com/tags/spreads/</link>
    <description>Recent content in Spreads on Hot For Knowledge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Victor Baybekov</copyright>
    <lastBuildDate>Wed, 19 Oct 2016 10:50:09 +0300</lastBuildDate><atom:link href="https://hotforknowledge.com/tags/spreads/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functional programming is a tool for thought, imperative programming is a tool for hacking</title>
      <link>https://hotforknowledge.com/2016/10/19/4-functional-for-thought-imperative-for-hacking/</link>
      <pubDate>Wed, 19 Oct 2016 10:50:09 +0300</pubDate>
      
      <guid>https://hotforknowledge.com/2016/10/19/4-functional-for-thought-imperative-for-hacking/</guid>
      <description>TL;DR; F# is great for algorithms and analytics. It could work for libraries, interop and high-performance code as well, but the experience is far from great and I do not want to fight with it anymore. At least I tried&amp;hellip;
I have been functional programming aficionado for a while. At some point, I took its advantages over mutable imperative code almost religiously. I fell in love with F#. Then I fell in love with mechanical sympathy, and F# - by being a multi-paradigm and .</description>
    </item>
    
    <item>
      <title>How to write the simplest trading strategy using Spreads</title>
      <link>https://hotforknowledge.com/2015/12/29/2-how-to-write-the-simplest-trading-strategy-using-spreads/</link>
      <pubDate>Tue, 29 Dec 2015 17:51:27 +0300</pubDate>
      
      <guid>https://hotforknowledge.com/2015/12/29/2-how-to-write-the-simplest-trading-strategy-using-spreads/</guid>
      <description>I am always amused when retail traders are offered and then do use black boxes with complex frameworks to build automatic trading strategies. Usually, that goes with an explanation how cool those platforms are and how easy to build a strategy using them. They forget about vendor lock-in and the most terrible model of shared state with events hell like &amp;ldquo;OnData&amp;rdquo;, &amp;ldquo;OnOrder&amp;rdquo;, &amp;ldquo;OnBarOpen&amp;rdquo;, &amp;ldquo;OnBarClose&amp;rdquo;, etc. The more I talk with people, the more I realize that CEP is the approach that desks and serious traders use.</description>
    </item>
    
    <item>
      <title>Introducing Spreads library</title>
      <link>https://hotforknowledge.com/2015/12/20/1-introducing-spreads-library/</link>
      <pubDate>Sun, 20 Dec 2015 17:46:36 +0300</pubDate>
      
      <guid>https://hotforknowledge.com/2015/12/20/1-introducing-spreads-library/</guid>
      <description>TL;DR; This post is about background and thoughts on my number-crunching library Spreads, which stands for Series and Panels for Real-time and Exploratory Analysis of Data Streams. The library and its readme are on GitHub: https://github.com/Spreads/Spreads.
While I worked at Goldman Sachs as a research analyst, I got used to internal declarative time series processing language. It was so cool that I could build MSCI index rebalancing methodology with several lines of code.</description>
    </item>
    
  </channel>
</rss>
