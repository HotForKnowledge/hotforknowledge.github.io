<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hot For Knowledge</title>
    <link>http://hotforknowledge.com/tags/cs/index.xml</link>
    <description>Recent content on Hot For Knowledge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Victor Baybekov</copyright>
    <atom:link href="http://hotforknowledge.com/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Functional programming is a tool for thought, imperative programming is a tool for hacking</title>
      <link>http://hotforknowledge.com/2016/10/19/4-functional-for-thought-imperative-for-hacking/</link>
      <pubDate>Wed, 19 Oct 2016 10:50:09 +0300</pubDate>
      
      <guid>http://hotforknowledge.com/2016/10/19/4-functional-for-thought-imperative-for-hacking/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;TL;DR;&lt;/strong&gt; F# is great for algorithms and analytics. It could work for libraries, interop and high-performance
code as well, but the experience is far from great and I do not want to fight with it anymore. At least I tried&amp;hellip;&lt;/p&gt;

&lt;p&gt;I have been functional programming aficionado for a while. At some point, I took its advantages over
mutable imperative code almost religiously. I fell in love with F#. Then I fell in love with
mechanical sympathy, and F# - by being a multi-paradigm and .NET language - still allowed me to get
almost all performance I needed, even if it required abusing it somewhat.&lt;/p&gt;

&lt;p&gt;But lately, I started to dig even deeper and closer to the metal, to use unsafe code, to do many small
experiments and microbenchmarks, to use .NET Core, and started to question my choice of F# as the
primary language for .NET &lt;em&gt;library&lt;/em&gt; development. Tooling, generated code performance, and .NET Core
integration could be better. As a matter of fact, I almost haven&amp;rsquo;t touched my F# code over last several
months while programming exclusively on my laptop.&lt;/p&gt;

&lt;p&gt;F# is probably the best choice for end product development, but not the one for libraries that require
performance, native interop, and (at this moment) .NET Core interop.&lt;/p&gt;

&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;Recently I have bought the very top model of MacBook Air with 8 Gb of RAM for development. Specifically,
for F# development, because IDE experience was always slower than C#. But even on this machine,
the IDE is still not responsive and compilation is slow. While C# projects fly on this machine even with R#,
F# ones crawl and creep even for such a small project as &lt;a href=&#34;https://github.com/Spreads/Spreads/tree/master/src/Spreads.Collections&#34;&gt;Spreads.Collections&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; and simple edits take a very noticeable pause for type inference to finish and for IDE to become responsive, and this pause grows non-linearly with a project size. I understand
that type inference is expensive and it is almost a recompilation step, but when refactoring is done
frequently it takes too much time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project recompilation&lt;/strong&gt; happens on every build, even if there are no changes in the code. And it is slow.
I searched for a solution in the &lt;a href=&#34;http://stackoverflow.com/questions/4697771/f-compiling-too-slow&#34;&gt;Internet&lt;/a&gt;, but it didn&amp;rsquo;t
help. The recompilation happened on all my 4 machines over the past couple of years. And the funny thing is
that F# projects do not see changes in referenced C# projects when compiled separately, not as a part of a solution.&lt;/p&gt;

&lt;p&gt;Each problem is minor in isolation, but when this happens very often, then most of the development time is spent on tooling,
not coding. In a workflow when I make many small refactorings, add tests and run microbenchmarks to see
the results of the changes - the total time costs become too significant. It is similar to a program with garbage collection
that takes most of the execution time. In the era when live editing and reload is a norm, slow recompilation significantly
&lt;a href=&#34;http://xkcd.com/303/&#34;&gt;impedes productivity&lt;/a&gt;. On the same machine, strongly-typed Angular2 (TypeScript) with WebPack
reloads in just several seconds, while VS Code also flies. I wonder why F# compilation couldn&amp;rsquo;t be slower than C#&amp;rsquo;s just by several percents, not times!?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;They say that Russian programmers used to be very good because they lacked frequent access to machines in the 80s and
they had to think a lot and to perfect their code before a chance to actually run it. That contrasts to modern
days when people start with opening an editor/IDE and think over a blank screen like a writer thinks over a blank sheet of paper.
On my laptop, F# nearly forces me to do such &lt;a href=&#34;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/HammockDrivenDev.md&#34;&gt;Hammock-driven development&lt;/a&gt;.
This is not bad per se, and for an end product, I think this is good. For some complex algorithm development, when most of the time
is spent on thinking about domain subject and not about generated IL, F# type inference in the background
is invaluable for correctness. And by my own experience, I could confirm that when F# code compiles it is very often already correct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;generated-code-performance&#34;&gt;Generated code performance&lt;/h2&gt;

&lt;p&gt;Generated code performance is also an issue: to get it right in F# one has to write really ugly
verbose mutable code and inspect IL and run a profiler to check for implicit allocations, which are
sometimes hidden somewhere in the compiled code. This really defeats the F# elegance and terseness.
(Also there is an interesting discussion &lt;a href=&#34;https://github.com/Hopac/Hopac/issues/1&#34;&gt;here&lt;/a&gt;).
Additions such as struct records/DU and &lt;code&gt;fixed&lt;/code&gt; are kind of overdue, especially when I
have already invested in unsafe C# as heavily as IL rewriting hack taken from &lt;a href=&#34;https://github.com/dotnet/corefxlab/tree/master/src/System.Slices/tools&#34;&gt;corefxlab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Native interop and unsafe&lt;/strong&gt; could be done in F#, but this is ugly and clumsy. The Recent addition of
&lt;code&gt;fixed&lt;/code&gt; keyword is nice, but there is still no support for it in VS2015, and the &lt;code&gt;NativePtr&lt;/code&gt; API
is painful to work with compared to C-like pointers in unsafe C#.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task Parallel Library&lt;/strong&gt; is the best thing since sliced bread in .NET universe. Async/await came from F#.
Yet, there is still a big overhead when interacting with TPL from F#, there is no native and
idiomatic ways to do so. I tried to use &lt;a href=&#34;http://stackoverflow.com/questions/35762747/performance-of-async-in-f-vs-c-sharp-is-there-a-better-way-to-write-async/35766979#35766979&#34;&gt;Task computation expressions&lt;/a&gt; from FSharpx project,
but they explode like Galaxy S7 in &lt;code&gt;for/while&lt;/code&gt; loops and other non-trivial constructs. Simple
&lt;code&gt;Bind&lt;/code&gt; and &lt;code&gt;Return&lt;/code&gt; work well with recursion, but in the end manual usage of &lt;code&gt;GetAwaiter&lt;/code&gt;,
&lt;code&gt;OnComplete&lt;/code&gt; callbacks and &lt;code&gt;TaskCompletionSource&lt;/code&gt; is more reliable. I believe TPL integration
at the core language level should be a priority to perceive of F# as a sibling on .NET platform,
and not as an adoptee.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File and type ordering&lt;/strong&gt; is an F# limitation that magically turns into blessing most of the times. But when it doesn&amp;rsquo;t,
&lt;a href=&#34;http://stackoverflow.com/questions/38360616/how-to-circumvent-f-file-ordering-and-types-dependency&#34;&gt;workarounds are awkward&lt;/a&gt;.
I spent some time to find a different architecture, but often recursive types across files are just the right thing.
With the recent introduction of recursive modules and namespaces, I could put all my code in a single file,
and sometimes I really thinking about this. #sarcasm&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implicit allocations and IL generation&lt;/strong&gt; are almost fixed in latest versions and have proper attention from the core team,
but sometimes a profiler shows unexpected results in the places where one would not expect. E.g. &lt;code&gt;Array.average&lt;/code&gt;
was &lt;a href=&#34;https://github.com/Microsoft/visualfsharp/issues/885&#34;&gt;allocating objects&lt;/a&gt; just recently. After a lot of
work on eliminating allocations in my Spreads library, it was a surprise to find this. &lt;em&gt;Generated IL code&lt;/em&gt; is not easy
to reason about compared to C#, which is almost &amp;ldquo;what you write is what you get&amp;rdquo; and is to IL like C to assembly.
F# &lt;a href=&#34;https://github.com/Microsoft/visualfsharp/issues/558&#34;&gt;sometimes surprises&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One could say I should fix F# itself since it is open source, but for the same reasons above
just setting up and compiling VisualFSharp repo from a clean clone is a half-day exercise on a really
powerful workstation machine; and editing is slow even if it eventually compiles with tests.
By the way, I really tried to fix the array issue above and almost succeeded, however, the
tooling was a great impediment in the process and I could hardly setup and compile the project
after several attempts. I also reported the IL issue but had no idea how to fix it.
I believe such contributions are optional and good will, not an obligation when I have my own work to do
(even though I would love to contribute more if I could both from time and technical ability perspective).
As they say in Russian, &amp;ldquo;Вам с шашечками или ехать?&amp;rdquo;/&amp;ldquo;Do you need limo or lift?&amp;rdquo;, and C# gives a good ride.&lt;/p&gt;

&lt;p&gt;Despite the issues above, there is nothing wrong with F# itself and there is still a way to write efficient code.
But to do so, I have to do many small experiments and changes very often, run tests and benchmarks - and repeat&amp;hellip;
In such workflow tooling again becomes the main obstacle to overcome the issues.&lt;/p&gt;

&lt;h2 id=&#34;net-core-interop&#34;&gt;.NET Core interop&lt;/h2&gt;

&lt;p&gt;This is both tooling and language issue. I often feel that Microsoft almost said: &amp;ldquo;F^&amp;amp;k you, come back in a year&amp;rdquo;.
It is just not there yet. Doesn&amp;rsquo;t work with C#/F# project mix. #&lt;strong&gt;dont&lt;/strong&gt;netcore&lt;/p&gt;

&lt;p&gt;When .NET Core was in alpha/beta, it was OK. Now it is 1.0 and there should be no excuses.
It feels again that F# is a side project for MSFT.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you think this is just F# critics and rant - don&amp;rsquo;t get me wrong. This is an open question and a call for action.
I am watching the development of &lt;a href=&#34;https://github.com/dotnet/corefx&#34;&gt;CoreFX&lt;/a&gt; and &lt;a href=&#34;https://github.com/dotnet/corefxlab&#34;&gt;CoreFXLab&lt;/a&gt; projects,
and really like the recent trend of making C# even more performant and even &lt;a href=&#34;https://github.com/dotnet/corefx/tree/master/src/System.Runtime.CompilerServices.Unsafe&#34;&gt;less safe&lt;/a&gt;
than existing &lt;code&gt;unsafe&lt;/code&gt; keyword. It feels like all the &lt;a href=&#34;http://joeduffyblog.com/&#34;&gt;&amp;ldquo;fairy tales&amp;rdquo;&lt;/a&gt; about C# as a system programming language
are slowly materializing. At the same time, C# aggressively takes the good parts from F# and is becoming
more and more functional (in both senses of the word). With Roslyn, it added interactive execution. If only they add &lt;code&gt;if&lt;/code&gt; as expression
and a compiler option to disable implicit type conversions, similar to checked arithmetics&amp;hellip;
It looks like F# relevance is diminishing unless Microsoft invests in its tooling.&lt;/p&gt;

&lt;p&gt;F# is very great and functional programming has many good parts. F# is still faster than Scala,
which takes forever to compile &amp;ldquo;Hello, World&amp;rdquo;. F# is great for an end product, like trading algorithms
or analytical code. Its absence of implicit conversions and presence of units of measure should
not be taken lightly. (I had a real bug due to implicit &lt;code&gt;int&lt;/code&gt;s conversions that took a long time and many
sanity checks to find, &amp;ldquo;select was not broken&amp;rdquo;). In addition to trading and analytics, there is a kind of libraries where F# shines like a supernova
- metaprogramming. I have a project that implements a very basic query language with FParsec, and it blows my mind
how easy it is to implement a new language. (&lt;a href=&#34;http://trelford.com/blog/post/parser.aspx&#34;&gt;Small Basic&lt;/a&gt; blog posts are a great start).&lt;/p&gt;

&lt;p&gt;This post started this morning from an &lt;a href=&#34;https://github.com/Spreads/Spreads/issues/68&#34;&gt;issue&lt;/a&gt; on GitHub
after once again I was fighting with .NET Core C#/F# interop and many issues from above. But instead of bullets
on what to change in the library I could&amp;rsquo;d help but just started writing
about the issues and experiences I have had recently. I invested into F# quite a lot and tried to make
it work where it doesn&amp;rsquo;t fit. But now I am tired and emotional as if I drunk a lot of it and am experiencing a hangover.
I am still addicted to it, though. It tastes great and has an elegant flavor, makes programming fun, protects from many classes of errors,
and will remain my #1 choice for end products where correctness is paramount. Oh, and F# interactive is awesome for
such scenarios, but I still could not find a way to productively use FSI for a solution with multiple C#/F# projects
and my workflow. &lt;em&gt;What I am doing wrong?&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Functional programming is a tool for thought, imperative programming is a tool for hacking.&amp;rdquo; &amp;copy; &lt;a href=&#34;https://twitter.com/buybackoff/status/689958055820333056&#34;&gt;Erik Meijer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Spreads library</title>
      <link>http://hotforknowledge.com/2015/12/20/1-introducing-spreads-library/</link>
      <pubDate>Sun, 20 Dec 2015 17:46:36 +0300</pubDate>
      
      <guid>http://hotforknowledge.com/2015/12/20/1-introducing-spreads-library/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR;&lt;/strong&gt; This post is about background and thoughts on my number-crunching library &lt;strong&gt;Spreads, &lt;/strong&gt;which stands for  &lt;strong&gt;S&lt;/strong&gt;eries and &lt;strong&gt;P&lt;/strong&gt;anels for &lt;strong&gt;R&lt;/strong&gt;eal-time and &lt;strong&gt;E&lt;/strong&gt;xploratory &lt;strong&gt;A&lt;/strong&gt;nalysis of &lt;strong&gt;D&lt;/strong&gt;ata &lt;strong&gt;S&lt;/strong&gt;treams. The library and its readme are on GitHub: &lt;a href=&#34;https://github.com/Spreads/Spreads&#34;&gt;https://github.com/Spreads/Spreads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While I worked at Goldman Sachs as a research analyst, I got used to internal declarative time series processing language. It was so cool that I could build MSCI index rebalancing methodology with several lines of code. Probably that was &lt;a href=&#34;http://news.efinancialcareers.com/uk-en/147434/inside-goldman-sachs-secret-sauce/&#34;&gt;Slang&lt;/a&gt; or some wrapper around it. After I left the firm, I cannot stand for other existing tools and wanted the same functionality as an end user. I had been far away from the IT department, had no idea about implementation, never uploaded any code to a &lt;a href=&#34;http://www.vanityfair.com/news/2013/09/michael-lewis-goldman-sachs-programmer&#34;&gt;German&lt;/a&gt; or any other file hostings and wrote my own implementation. (This paragraph is name dropping for search engines, there is no affiliation or any other relation other than design inspiration).&lt;/p&gt;

&lt;p&gt;Data series could be modeled as IEnumerable or IObservable sequences. Existing libraries such as LINQ and Rx provided rich functionality and I used them initially from code. However, most data series, e.g. time series, are navigable sequences of key-value mappings. This nature could not be fully leveraged by those libraries.&lt;/p&gt;

&lt;p&gt;In 2013, &lt;a href=&#34;https://github.com/BlueMountainCapital/Deedle&#34;&gt;Deedle&lt;/a&gt; library was open sourced. I learned F# with it and contributed a couple of pull requests to it. And in a weird chain of events, I almost achieved but then ruined my American dream indirectly due to my experience with Deedle. At my current work, we used it for rapid development. However, due to internal complexity, immutable design, performance and memory consumption we couldn&amp;rsquo;t continue our development with it. When we moved from a prototype on small data to a high-volume time series, Windows/Chunks caused OutOfMemory exception because of eager intermediate evaluation of each window/chunk. Windowing was one of the most frequently used functionality and we quickly realized that to avoid allocations we need lazy windows and other lazy LINQ-like calculations that leverage data series nature.&lt;/p&gt;

&lt;p&gt;For a year before that, I had been working on a Spreads library for complex event processing, but could not get the design and performance right. Then I re-watched videos by Rich Hickey (&lt;a href=&#34;http://www.infoq.com/presentations/Value-Values&#34;&gt;Value of values&lt;/a&gt;, especially about place-oriented programming), Erik Meijer (&lt;a href=&#34;https://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2014/Keynote-Duality&#34;&gt;Duality and the End of reactive&lt;/a&gt; and the &lt;a href=&#34;https://channel9.msdn.com/posts/Erik-Meijer-Functional-Programming-From-First-Principles&#34;&gt;one&lt;/a&gt; with poor little mutable bear that was publicly torn apart) and finalized the design in my head. Series are mutable properties of some identities, e.g. a price of a financial instrument, a temperature in San-Francisco, etc. Identity as a whole is immutable as an object reference (e.g. person name) until its death (a security is delisted, the earth is destroyed). Series are mutable as an object but immutable as data. Every key-value pair inside series - when they are properties of identities - are immutable, and new pairs are appended at the end of series. In the real world, however, we could have observation errors or even trades on exchanges could be canceled,  so mutability is inevitable, as Erik showed with the bear, and even historical data is mutable.&lt;/p&gt;

&lt;p&gt;After the core functionality of Spreads was ready, we did performance tests and found that Spreads implementation was pretty fast with low memory consumption and allocations. Additionally, Spreads library was initially designed to support real-time streaming data, but Deedle &lt;a href=&#34;https://github.com/BlueMountainCapital/Deedle/issues/51&#34;&gt;does not and will not&lt;/a&gt; support streaming data due to fundamental design decisions (immutability, Pandas/R-like data structures). We migrated to Spreads for backtesting and optimization, implemented live streaming of data and built our entire data processing pipeline on Spreads - from strategy backtesting to trading. As of version 0.1+, existing functionality became fast and stable enough for use in our production (where we also test, debug and fix it - current status is alpha).&lt;/p&gt;

&lt;p&gt;While developing Spreads, I became a big fan of &lt;a href=&#34;http://mechanical-sympathy.blogspot.ru/&#34;&gt;mechanical sympathy&lt;/a&gt;. I watched all talks by Martin Thompson and was highly impressed (the best talk by Martin and Todd Montgomery is &lt;a href=&#34;https://www.youtube.com/watch?v=oxjT7veKi9c&#34;&gt;this one&lt;/a&gt;, listening to it again while writing this post, 33:50+ is my favorite place and 100% to the point). The main data structure in Spreads - SortedMap + its cursors - was already a kind of Disruptor, and I was definitely thinking about it while developing Spreads. But Martin opened my eyes on the fact that &amp;ldquo;&lt;a href=&#34;https://twitter.com/buybackoff/status/653960102374940672&#34;&gt;Fast systems are all alike; every slow system is slow in its own way&lt;/a&gt;&amp;rdquo;.  All his talks combined finally helped me to stop worrying about functional fundamentalism and start loving performance above any purism.&lt;/p&gt;

&lt;p&gt;Another &lt;a href=&#34;http://www.infoq.com/presentations/java-evolution-performance&#34;&gt;talk &lt;/a&gt;helped me to realize how happy I am using .NET, where value types in arrays are contiguous in memory, unsafe is built-in and won&amp;rsquo;t be removed in a next version, native calls do not require special builds with special method names, tooling is great, TPL is awesome, and F# is the best language in the world even for imperative programming! I have never bought the argument that MSFT is evil and Linux is religiously better. All these cries, when they sound like religious, are from cheapskates who could not afford MSFT&amp;rsquo;s product in school - but if a product is better than others and has support, it must cost money. I have Windows on MacBook because it is better for end users who do anything else than web-browsing (e.g. Excel). I do know that Windows Server is (or used to be) not real-time in the strict sense, but nowadays FPGAs are being commoditized. Strict real-time is required for cases where lives depend on it or for &amp;ldquo;true HFT&amp;rdquo;, and such cases will always require a custom code (hopefully in Rust in the future) inside custom hardware. Since milliseconds &lt;a href=&#34;http://stackoverflow.com/a/22082528/801189&#34;&gt;are no longer&lt;/a&gt; &amp;ldquo;true HFT&amp;rdquo;, we could rule out this use case for managed languages. For all other cases, Spreads is fast enough (could process tens of millions of data items per second per thread) and will be even faster. (My personal challenge is to make it no slower than existing commercial systems!) I am happy to pay more to AWS or to use a Windows server in office just because it is so easy to connect via RDP, and I am lazy and prefer GUI over a console. But at the time I write this, some smart people &lt;a href=&#34;https://github.com/dotnet/coreclr/releases&#34;&gt;are working&lt;/a&gt; on making .NET a first-class citizen on Linux, and it is already present there via Mono. Poor JVM users do not have async/await and the goodies I mentioned in the beginning of this rant, but this is not the reason to suffer and rewrite a copy of Spreads for JVM (however, this will very likely happen). Spreads library is as cross-platform as .NET, which current developments promise a bright future!&lt;/p&gt;

&lt;p&gt;I tried to make Spreads as mechanically sympathetic and fast as possible, at the same time keeping nice simple public API. Today I have released  &lt;a href=&#34;https://github.com/Spreads/Spreads&#34;&gt;Spreads library.&lt;/a&gt; The name &lt;strong&gt;Spreads&lt;/strong&gt; stands for &lt;strong&gt;S&lt;/strong&gt;eries and &lt;strong&gt;P&lt;/strong&gt;anels for &lt;strong&gt;R&lt;/strong&gt;eal-time and &lt;strong&gt;E&lt;/strong&gt;xploratory &lt;strong&gt;A&lt;/strong&gt;nalysis of &lt;strong&gt;D&lt;/strong&gt;ata &lt;strong&gt;S&lt;/strong&gt;treams.&lt;/p&gt;

&lt;p&gt;I will not copy the readme here, please go to &lt;a href=&#34;https://github.com/Spreads/Spreads&#34;&gt;Spreads repository&lt;/a&gt;, download code or &lt;a href=&#34;https://www.nuget.org/packages/Spreads/&#34;&gt;NuGet package&lt;/a&gt;, create an issue and please submit a pull request if you can. Everything is up for grabs!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My “hacker” background</title>
      <link>http://hotforknowledge.com/2015/08/23/0-hacker-background/</link>
      <pubDate>Sun, 23 Aug 2015 17:41:56 +0300</pubDate>
      
      <guid>http://hotforknowledge.com/2015/08/23/0-hacker-background/</guid>
      <description>&lt;p&gt;On my LinkedIn page, there are almost no endorsements for programming/tech, even though 
I program since age 12 or so. Probably this is an indication that the endorsement system
is broken there or I am not very active there recently. Or this is a reflection of a mild
problem I have - very few people from my former professional,
mostly investment banking, network know that I can code well beyond VBA scripts.
The problem is mild because I am not interested in a full-time programmer job outside finance or data science domain.
I am mostly interested in quantitative finance or startup projects where I could utilize all my knowledge
and boost my productivity by delegating work to hardware. These days I think about programming in the same
way as I think about math or English language or Excel - it is just an essential tool for achieving goals
in some practical domain, not a separate domain (unless you are a language designer or a computer science teacher).&lt;/p&gt;

&lt;p&gt;I enjoy many aspects of pure programming, such as &lt;del&gt;premature&lt;/del&gt; performance  optimization, but the most exciting thing about programming for me is an augmentation of my human abilities. I cannot add numbers hundred million times per second or crawl the entire web and analyze the content of million pages, but I can write a program to do so. A great philosophical question, which requires a separate post, is &amp;ldquo;Who is the actor - an entity that performs the actions encoded in my program - when my program runs&amp;rdquo;. Is it a machine, or a person who started the program, or an author of programming language, or a CPU designer, or it is me? Isn&amp;rsquo;t it a way to expand human consciousness and existence beyond their bodies and lifetimes!?&lt;/p&gt;

&lt;p&gt;Below are my answers to some programming background questions from my application to the Hacker School, where I spent three summer months in 2014 and which is now known as the &lt;a href=&#34;https://www.recurse.com/&#34;&gt;Recurse Center&lt;/a&gt;. (I like the &lt;a href=&#34;https://www.recurse.com/blog/77-hacker-school-is-now-the-recurse-center&#34;&gt;old name&lt;/a&gt; much more!)  By the way, this is a great place for people who are passionate about programming, who are not yet damaged by formal education or &lt;a href=&#34;https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition&#34;&gt;enterprise software practices&lt;/a&gt;, and who prefer &lt;a href=&#34;http://www.wired.com/2012/02/zuck-letter/&#34;&gt;the hacker way&lt;/a&gt; of doing things to other ways.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Describe your programming background in a few sentences.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At age 12, I was yet to learn about the Turing test and tried to write a chatbot talking to humans. That failure did not push me away from programming. During my high school, I was planning for a CS degree and was accepted to a local tech university already in January 2002. However, in the June the best university in my country invited me to any economics faculty I would choose, without exams. That was a no-brainer because I liked economics as well. Programming became my main hobby and an important tool for study and work, but it was not my craft. In 2010, I was not happy with the stagnating investments industry and could not ignore the booming tech industry, so I started to invest my time heavily into modern programming. I was fluent in VBA and OK with the LAMP stack and HTML/JavaScript, so I started with Ruby on Rails. Then I touched statically typed C# and realized that I cannot stand for the avoidable complexity of dynamic languages. With C#, I started to develop some projects, but it did not work for some tasks. Over the past year, I learned F# to a decent level and now I develop my grown-up projects with .NET stack with a huge bias toward F#.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you worked professionally as a programmer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, technically. But my first ever $100 I earned around 2004 from guys in my dorm by writing a search web page to query a DB with real estate objects and a page with a form to add new objects. Then a colleague from my first real job for several months paid me an additional half of my intern salary from his pocket to develop for him a website about the local stock market. Then I used VBA/SQL heavily to build infrastructure for analytics and to do complex calculations while working at other banks; however, I was paid for investment research, not code. Now I program my own projects and this is my primary activity, but it is not employment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you have a Computer Science degree or are you seeking one?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I do not have a CS degree and am not going to seek one because this is impractical now.&lt;/p&gt;

&lt;p&gt;(answers are as of January 2014)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>